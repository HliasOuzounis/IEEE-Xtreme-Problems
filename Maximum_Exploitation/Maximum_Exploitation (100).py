R, C = tuple(map(int, input().split()))
x, y = tuple(map(int, input().split()))

sap = [[0] * (C + 1) for _ in range(R + 1)]
best_row = [0] * (R + 1)
best_col = [0] * (C + 1)

for r in range(1, R + 1):
    sap[r] = [0] + list(map(int, input().split()))
    best_row[r] = max(best_row[r], best_row[r-1])

    for c in range(1, C + 1):
        best_col[c] = max(best_col[c], best_col[c-1])

        sap[r][c] += sap[r-1][c] + sap[r][c-1] - sap[r-1][c-1]

        if r >= x and c >= y:
            xy_plant = sap[r][c] - sap[r-x][c] - sap[r][c-y] + sap[r-x][c-y]
            best_row[r] = max(best_row[r], xy_plant)
            best_col[c] = max(best_col[c], xy_plant)
        if r >= y and c >= x:
            yx_plant = sap[r][c] - sap[r-y][c] - sap[r][c-x] + sap[r-y][c-x]
            best_row[r] = max(best_row[r], yx_plant)
            best_col[c] = max(best_col[c], yx_plant)

ans = 0
for r in range(1, R + 1):
    for c in range(1, C + 1):
        if r >= x and c >= y:
            xy_plant = sap[r][c] - sap[r-x][c] - sap[r][c-y] + sap[r-x][c-y]
            ans = max(
                ans,
                xy_plant + max(best_row[r-x], best_col[c-y]) 
            )
        
        if r >= y and c >= x:
            yx_plant = sap[r][c] - sap[r-y][c] - sap[r][c-x] + sap[r-y][c-x]
            ans = max(
                ans,
                yx_plant + max(best_row[r-y], best_col[c-x]) 
            )
print(ans)