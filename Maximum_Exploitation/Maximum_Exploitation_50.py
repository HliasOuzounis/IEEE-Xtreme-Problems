R, C = tuple(map(int, input().split()))
x, y = tuple(map(int, input().split()))

field = []
for _ in range(R):
    field.append(tuple(map(int, input().split())))

# https://stackoverflow.com/questions/2277749/calculate-the-sum-of-elements-in-a-matrix-efficiently

sat = [[0] * C for _ in range(R)]
for r, row in enumerate(field):
    for c, item in enumerate(row):
        sat[r][c] = item
        sat[r][c] += sat[r - 1][c] if r > 0 else 0
        sat[r][c] += sat[r][c - 1] if c > 0 else 0
        sat[r][c] -= sat[r - 1][c - 1] if r > 0 and c > 0 else 0

class Field:
    def __init__(self, x, y, s):
        self.x = x
        self.y = y
        self.sum = s
        
def get_best_pos(summed_area_table, height, lenght):
    if (height >= len(summed_area_table) or
        lenght >= len(summed_area_table[0])):
        return []
        
    best_pos = []
    for a in range(height - 1, len(summed_area_table)):
        for b in range(lenght - 1, len(summed_area_table[a])):
            s = sat[a][b]
            s += sat[a - height][b - lenght] if a >= height and b >= lenght else 0
            s -= sat[a][b - lenght] if b >= lenght else 0
            s -= sat[a - height][b] if a >= height else 0
            best_pos.append(Field(a, b, s))

    return sorted(best_pos, key= lambda x: x.sum, reverse=True)

vertical = get_best_pos(sat, x, y)
if x != y:
    horizontal = get_best_pos(sat, y, x)

def get_best_fields_vertical(list1, list2):
    if not list1 and not list2: return 0
    max_sum = -1
    for i, f1 in enumerate(list1):   
        for f2 in list2[i:]:
            if f1.sum + f2.sum <= max_sum: break
            if abs(f1.x - f2.x) >= x or abs(f1.y - f2.y) >= y: 
                max_sum = max(f1.sum + f2.sum, max_sum)
                break
    
    return max(list1[0].sum, max_sum)

def get_best_fields_horizontal(list1, list2):
    if not list1 and not list2: return 0
    max_sum = -1
    for i, f1 in enumerate(list1):   
        for f2 in list2[i:]:
            if f1.sum + f2.sum <= max_sum: break
            if abs(f1.x - f2.x) >= y or abs(f1.y - f2.y) >= x:  
                max_sum = max(f1.sum + f2.sum, max_sum)
                break
    
    return max(list1[0].sum, max_sum)

def get_best_fields_vertical_and_horizontal(list1, list2):
    if not list1: return list2[0].sum
    if not list2: return list1[0].sum
    max_sum = -1
    for f1 in list1:   
        for f2 in list2:
            if f1.sum + f2.sum <= max_sum: break
            if (f1.x - f2.x >= x or f2.x - f1.x >= y or
                f1.y - f2.y >= y or f2.y - f1.y >= x):
                max_sum = max(f1.sum + f2.sum, max_sum)
                break
    
    return max(list1[0].sum, list2[0].sum, max_sum)
    
if x != y:
    print(max(
        get_best_fields_vertical(vertical, vertical),
        get_best_fields_horizontal(horizontal, horizontal),
        get_best_fields_vertical_and_horizontal(vertical, horizontal),
    ))
else:
    print(get_best_fields_vertical(vertical, vertical))
